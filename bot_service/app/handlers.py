import logging
import os
import json
import tempfile
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from app.utils.temp_file import TempFileManager

logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self, api_token, analysis_service, rabbitmq_handler):
        self.bot = Bot(token=api_token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.analysis_service = analysis_service
        self.rabbitmq_handler = rabbitmq_handler

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
        self.register_handlers()

    def register_handlers(self):
        self.dp.message.register(self.send_welcome, F.text == "/start")
        self.dp.message.register(self.handle_image, F.content_type == "photo")

    async def send_welcome(self, message: Message):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç! üëã\n"
            "–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –æ–±—ä–µ–∫—Ç—ã. üì∑"
        )

    async def handle_image(self, message: Message):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        user_data = {
            "telegram_id": message.from_user.id,
            "username": message.from_user.username,
            "message": "–§–æ—Ç–æ",
        }

        try:
            photo = message.photo[-1]
            file_info = await self.bot.get_file(photo.file_id)
            file_path = file_info.file_path

            # –†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
            with TempFileManager(suffix=".jpg") as temp_file:
                await self.bot.download_file(file_path, temp_file)

                # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                analysis_result = await self.analysis_service.analyze_image(temp_file)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
            user_data["analysis_result"] = analysis_result

            if analysis_result.get("status") == "ok":
                results = analysis_result.get("results", [])
                if not results:
                    await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ—Ö–æ–∂–∏–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return

                answer = "\n".join(
                    [f" - {r.get('cap_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}, —Å—Ö–æ–∂–µ—Å—Ç—å: {r.get('similarity_score', 0):.2f}" for r in results]
                )
                await message.reply(f"–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ –æ–±—ä–µ–∫—Ç—ã:\n{answer}")
            else:
                await message.reply(f"–û—à–∏–±–∫–∞: {analysis_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ RabbitMQ
            await self.rabbitmq_handler.send_to_queue(json.dumps(user_data))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    async def run(self):
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        await self.dp.start_polling(self.bot)
