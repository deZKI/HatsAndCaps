import json
import logging
from pathlib import Path

import aiofiles
import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, Message
from PIL import Image

from utils import TempFileManager

logger = logging.getLogger(__name__)


class TelegramBot:
    def __init__(self, api_token, analysis_service, rabbitmq_handler):
        self.bot = Bot(token=api_token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.analysis_service = analysis_service
        self.rabbitmq_handler = rabbitmq_handler

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
        self._register_handlers()

    def _register_handlers(self):
        self.dp.message.register(self.send_welcome, F.text == "/start")
        self.dp.message.register(self.handle_image, F.content_type == "photo")

    async def send_welcome(self, message: Message):
        """
        –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã /start.
        """
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç! üëã\n"
            "–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –æ–±—ä–µ–∫—Ç—ã. üì∑"
        )

    async def handle_image(self, message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        """
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        user_data = {
            "telegram_id": message.from_user.id,
            "username": message.from_user.username,
            "message": "–§–æ—Ç–æ",
        }

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            photo = message.photo[-1]
            file_info = await self.bot.get_file(photo.file_id)
            file_path = file_info.file_path

            # –†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
            with TempFileManager(suffix=".jpg") as temp_file:
                await self.bot.download_file(file_path, temp_file)

                # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                analysis_result = await self.analysis_service.analyze_image(temp_file)
                user_data["analysis_result"] = analysis_result

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self.process_analysis_result(message, analysis_result)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ RabbitMQ
            await self.rabbitmq_handler.send_to_queue(json.dumps(user_data))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. üòû")

    async def process_analysis_result(self, message: Message, analysis_result: dict):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        if analysis_result.get("status") != "ok":
            await message.reply(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return

        results = analysis_result.get("results", [])
        if not results:
            await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ—Ö–æ–∂–∏–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        for res in results:
            await self.send_result(message, res)

        await message.reply("–í–æ—Ç –ø–æ—Ö–æ–∂–∏–µ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –Ω–∞—à–µ–ª –¥–ª—è –≤–∞—Å! üòä")

    from io import BytesIO

    from aiogram.types import FSInputFile
    from PIL import Image

    async def send_result(self, message: Message, result: dict):
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        cap_name = result.get("cap_name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        similarity_score = result.get("similarity_score", 0.0)
        image_path = result.get("image_path")

        if not image_path:
            logger.warning(f"–£ –æ–±—ä–µ–∫—Ç–∞ {cap_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = f"{self.analysis_service.service_url}/images/{image_path.lstrip('/')}"
        image_url = image_url.replace("\\", "/")  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª—ç—à–∏

        # –ü—É—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        temp_dir = Path("temp_images")
        temp_dir.mkdir(parents=True, exist_ok=True)
        local_image_path = temp_dir / Path(image_path).name

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            async with aiohttp.ClientSession() as session:
                async with session.get(image_url) as response:
                    if response.status == 200:
                        async with aiofiles.open(local_image_path, "wb") as f:
                            await f.write(await response.read())
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}, —Å—Ç–∞—Ç—É—Å: {response.status}")
                        return

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ WEBP
            if local_image_path.suffix.lower() == ".webp":
                converted_path = temp_dir / f"{local_image_path.stem}.jpg"
                with Image.open(local_image_path) as img:
                    img.convert("RGB").save(converted_path, "JPEG")
                local_image_path = converted_path

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            photo_file = FSInputFile(local_image_path)
            await self.bot.send_photo(
                chat_id=message.chat.id,
                photo=photo_file,
                caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {cap_name}\n–°—Ö–æ–∂–µ—Å—Ç—å: {similarity_score:.2f}"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_url}: {e}")
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {cap_name}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                if local_image_path.exists():
                    local_image_path.unlink()
            except Exception as cleanup_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {local_image_path}: {cleanup_error}")

    async def run(self):
        """
        –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.
        """
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        await self.dp.start_polling(self.bot)
